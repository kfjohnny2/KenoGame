#include <iostream>

#include "KenoDAO.h"
/**
 * @brief Implementation of the methods present int the class KenoBet
 * @details That class will have all implementation mutators  functions or get methods.
 * @author Irene Ginani e Johnnylee Bryan
 */
using namespace std;
         /**
         * @brief Adds a number to the spots only if the number is not already there.
         *
         * @param _spot The number that will be inserted.
         * @return True if the number was successfully inserted; False otherwise.
         */
bool
KenoBet::addNumber( int _spot){
    if(std::find(m_spots.begin(), m_spots.end(), _spot) == m_spots.end()){
        // m_spots.insert(m_spots.end(), _spot);
        m_spots.push_back(_spot);
        return true;
    } else{
        m_maxSpots++;
        return false;
    }
}
         /**
         * @brief Set the value of the wage for the game.
         *
         * @param _wage The value of the Bet.
         * @return True if the wage is above zero; False otherwise.
         */
bool
KenoBet::setWage( float _wage){
    if(_wage > 0){
        m_wage = _wage;
        return true;
    } else{
        return false;
    }
}
         /**
         * @brief Clears the KenoBet class.
         */
void
KenoBet::reset( void ){
    m_spots.clear();
    m_wage = 0;
}
         /**
         * @brief Get the value of the wage.
         * @details The value of the wage gets higher or lower during the game.
         *
         * @return Value of the wage.
         */
float
KenoBet::getWage() const{
    return m_wage;
}
         /**
         * @brief Get the size of spots vector.
         *
         * @return Number of spots present in the bet.
         */
std::size_t
KenoBet::numChosen() const{
    return m_spots.size();
}
std::size_t
KenoBet::numChosen(void ) const;
         /**
         * @brief Compare the spots of the player bet with the random numbers generated by the game.
         *
         * @param _hits The vector of 20 random numbers from 1 to 20.
         * @return A vector with the spots that were hit by the player.
         */
std::vector<int>
KenoBet::getHits(vector<int> & _hits) const{

    std::vector<int> actual_hits;
    for (unsigned int i = 0; i < m_spots.size(); ++i){
        for (int j = 0; j < 20; ++j){
            if(m_spots[i] == _hits[j]){
                actual_hits.push_back(m_spots[i]);
            }
        }
    }
    return actual_hits;
}
         /**
         * @brief Get the spots chosed by the the player.
         *
         * @return Vector of spots.
         */
std::vector<int>
KenoBet::getSpots(void) const{
    return m_spots;
}
         /**
         * @brief Method that get the number of rounds that will be played.
         *
         * @return Number of rounds.
         *
         */
int
KenoBet::getRounds(void) const{
    return m_rounds;
}


