
#include <vector>
#include <cstddef>
#include <algorithm>

#ifndef _KENO_BET_H_
#define _KENO_BET_H_

/**
 * @brief Class with the KenoBet Data Access Object.
 * @details That class will have all data that will be used in game, and all mutators for the results during the game.
 *
 */
class KenoBet{
	public:
		/**
		*@brief Constructor of the Class KenoBet.
		*
		*The constructor receives the inicial data to the class.
		*
		*@param _maxNumSpots Max number of spots that the player can play.
		*@param _rounds Number of rounds that the player choose.
		*
		*/
		explicit KenoBet( unsigned int _maxNumSpots = 15, unsigned int _rounds = 1){
			if(_maxNumSpots <= 15){
				m_maxSpots = _maxNumSpots;
				m_rounds = _rounds;
			}
		}
		/**
		 * @brief Adds a number to the spots only if the number is not already there.
		 *
		 * @param _spot The number that will be inserted.
		 * @return True if the number was successfully inserted; False otherwise.
		 */
		bool addNumber(int _spot);
		/**
		 * @brief Set the value of the wage for the game.
		 *
		 * @param _wage The value of the Bet.
		 * @return True if the wage is above zero; False otherwise.
		 */
		bool setWage(float _wage);
		/**
		 * @brief Clears the KenoBet class.
		 */
		void reset(void);
		/**
		 * @brief Get the value of the wage.
		 * @details The value of the wage gets higher or lower during the game.
		 *
		 * @return Value of the wage.
		 */
		float getWage( void ) const;
		/**
		 * @brief Get the size of spots vector.
		 *
		 * @return Number of spots present in the bet.
		 */
		std::size_t numChosen(void ) const;
		/**
		 * @brief Compare the spots of the player bet with the random numbers generated by the game.
		 *
		 * @param _hits The vector of 20 random numbers from 1 to 20.
		 * @return A vector with the spots that were hit by the player.
		 */
		std::vector<int> getHits(std::vector<int> & _hits) const;
		/**
		 * @brief Get the spots chosed by the the player.
		 *
		 * @return Vector of spots.
		 */
		std::vector<int> getSpots( void ) const;
		/**
		 * @brief Method that get the number of rounds that will be played.
		 *
		 * @return Number of rounds.
		 *
		 */
		int getRounds(void) const;
	private:
		std::vector<int> m_spots;  /*!< Vector that receives the the bets of the player */
		float m_wage;			   /*!< Float value for the wage of the player */
		unsigned int m_maxSpots;   /*!< Number of the spots chosed*/
		int m_rounds;			   /*!< Number of rounds that will be played>*/
};

#endif